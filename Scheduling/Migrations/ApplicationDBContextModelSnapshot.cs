// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scheduling.Models;

namespace Scheduling.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            ConcurrencyStamp = "76d11184-521e-4db7-a3bc-e7d6373c311a",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "a12be9c5-aa65-4af6-bd97-00bd9344e575",
                            ConcurrencyStamp = "16ff0e89-c1f9-40fe-b531-960d2adcb372",
                            Name = "Doctor"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            UserId = "a12be9c5-aa65-4af6-bd97-00bd9344e575",
                            RoleId = "a12be9c5-aa65-4af6-bd97-00bd9344e575"
                        },
                        new
                        {
                            UserId = "a12be9c5-aa65-4af6-bd97-00bd9344e5751d",
                            RoleId = "a12be9c5-aa65-4af6-bd97-00bd9344e575"
                        },
                        new
                        {
                            UserId = "a12be9c5-aa65-4af6-bd97-00bd9344e5752d",
                            RoleId = "a12be9c5-aa65-4af6-bd97-00bd9344e575"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Scheduling.Models.MyUsersIdentity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MyUsersIdentity");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c71fd70-1311-4e1c-8e6d-94f653c536b4",
                            Email = "sara@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Female",
                            LockoutEnabled = false,
                            Name = "Sara",
                            NormalizedEmail = "sara@gmail.com",
                            NormalizedUserName = "Sara",
                            PasswordHash = "AQAAAAEAACcQAAAAECD/KqW3j27xeZ8ZudU66Ike7Qm4yq2Cf8KJmjRZ3BAknFzCbkrYbt1csZtnH3FfwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "Konor",
                            TelNumber = "+485756451",
                            TwoFactorEnabled = false,
                            UserName = "Sara"
                        });
                });

            modelBuilder.Entity("Scheduling.Models.ReservationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Scheduling.Models.MyDoctorsIdentity", b =>
                {
                    b.HasBaseType("Scheduling.Models.MyUsersIdentity");

                    b.Property<string>("Specialisation")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MyDoctorsIdentity");

                    b.HasData(
                        new
                        {
                            Id = "a12be9c5-aa65-4af6-bd97-00bd9344e575",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac1638cf-7c1a-4193-b9c8-2c89a723dd91",
                            Email = "petegriu@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Male",
                            LockoutEnabled = false,
                            Name = "Peter",
                            NormalizedEmail = "petegriu@gmail.com",
                            NormalizedUserName = "Peter",
                            PasswordHash = "AQAAAAEAACcQAAAAELvZ5UPi2P4O/2BHRwpyMVlzpq6rvdRGOsiW8EVr2oMikm98c2OH7bxvc31kKhWElQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "Petegriu",
                            TelNumber = "+48434343444",
                            TwoFactorEnabled = false,
                            UserName = "Peter",
                            Specialisation = "Allergist/Immunologist"
                        },
                        new
                        {
                            Id = "a12be9c5-aa65-4af6-bd97-00bd9344e5751d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1cd2731-1c97-4dd2-a4a4-e0ac387c05ad",
                            Email = "soros@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Female",
                            LockoutEnabled = false,
                            Name = "Anna",
                            NormalizedEmail = "soros@gmail.com",
                            NormalizedUserName = "Anna",
                            PasswordHash = "AQAAAAEAACcQAAAAENhCeQMvagHhBjVPmF0kgHpbt453Wp2i6pnaodVmNL0xXHZcAG4Ewd/0t2b/REZ6VA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "Soros",
                            TelNumber = "+48434343444",
                            TwoFactorEnabled = false,
                            UserName = "Anna",
                            Specialisation = "Cardiologist"
                        },
                        new
                        {
                            Id = "a12be9c5-aa65-4af6-bd97-00bd9344e5752d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6095f35-1067-4b50-a67c-76b2ecf12e74",
                            Email = "stupak@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Female",
                            LockoutEnabled = false,
                            Name = "Julia",
                            NormalizedEmail = "stupak@gmail.com",
                            NormalizedUserName = "Julia",
                            PasswordHash = "AQAAAAEAACcQAAAAEADR0TRAy44+FqcijoXusZcKd6yb/d14cAeFxBxZowmGLw5yMak4TTnzNIhwYeu0uQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "Stupak",
                            TelNumber = "+48434343444",
                            TwoFactorEnabled = false,
                            UserName = "Julia",
                            Specialisation = "Dermatologist"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Scheduling.Models.MyUsersIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Scheduling.Models.MyUsersIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scheduling.Models.MyUsersIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Scheduling.Models.MyUsersIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
