// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scheduling.Models;

namespace Scheduling.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            ConcurrencyStamp = "6b6f9286-c694-4ddf-90c3-f32088753276",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "a12be9c5-aa65-4af6-bd97-00bd9344e575",
                            ConcurrencyStamp = "c0a12411-09d5-4fa9-a103-7dd16093e205",
                            Name = "Doctor"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            UserId = "a12be9c5-aa65-4af6-bd97-00bd9344e575",
                            RoleId = "a12be9c5-aa65-4af6-bd97-00bd9344e575"
                        },
                        new
                        {
                            UserId = "a12be9c5-aa65-4af6-bd97-00bd9344e5751d",
                            RoleId = "a12be9c5-aa65-4af6-bd97-00bd9344e575"
                        },
                        new
                        {
                            UserId = "a12be9c5-aa65-4af6-bd97-00bd9344e5752d",
                            RoleId = "a12be9c5-aa65-4af6-bd97-00bd9344e575"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Scheduling.Models.MyUsersIdentity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9804ab03-8d27-4150-a269-b0783434e605",
                            Email = "sara@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Female",
                            LockoutEnabled = false,
                            Name = "Sara",
                            NormalizedEmail = "sara@gmail.com",
                            NormalizedUserName = "Sara",
                            PasswordHash = "AQAAAAEAACcQAAAAEBfT+SGVDnPk8I1lV8xn/rUWhcLx0VHB73LY+zHtUJJouyCtYyehv9pXiqNjh8gzRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "Konor",
                            TelNumber = "+485756451",
                            TwoFactorEnabled = false,
                            UserName = "Sara"
                        },
                        new
                        {
                            Id = "a12be9c5-aa65-4af6-bd97-00bd9344e575",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "67047119-f6ff-4c86-8630-5d0e296e01af",
                            Email = "petegriu@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Male",
                            LockoutEnabled = false,
                            Name = "Peter",
                            NormalizedEmail = "petegriu@gmail.com",
                            NormalizedUserName = "Peter",
                            PasswordHash = "AQAAAAEAACcQAAAAEFmG4iFfuIkGSRgliKS1pKb3n8b9KQ+RAgXCdfVnZKp8/bo1LZgqihCJPd+uplVxwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Specialization = "Allergist/Immunologist",
                            Surname = "Petegriu",
                            TelNumber = "+48434343444",
                            TwoFactorEnabled = false,
                            UserName = "Peter"
                        },
                        new
                        {
                            Id = "a12be9c5-aa65-4af6-bd97-00bd9344e5751d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1188037a-10e9-490f-b7db-1047964e2698",
                            Email = "soros@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Female",
                            LockoutEnabled = false,
                            Name = "Anna",
                            NormalizedEmail = "soros@gmail.com",
                            NormalizedUserName = "Anna",
                            PasswordHash = "AQAAAAEAACcQAAAAEB54SRQe3nAcCqwm2X31zaScm+p0JuvF/toGzP35WHG/SE142PV3cdYu4xon3nyk8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Specialization = "Cardiologist",
                            Surname = "Soros",
                            TelNumber = "+48434343444",
                            TwoFactorEnabled = false,
                            UserName = "Anna"
                        },
                        new
                        {
                            Id = "a12be9c5-aa65-4af6-bd97-00bd9344e5752d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a6f05d5-bc66-47ea-98e7-d93952c49bf4",
                            Email = "stupak@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Female",
                            LockoutEnabled = false,
                            Name = "Julia",
                            NormalizedEmail = "stupak@gmail.com",
                            NormalizedUserName = "Julia",
                            PasswordHash = "AQAAAAEAACcQAAAAEHhLEx6Q/rSlXMTaz824Lw9wYeDFS0mr7BkWbNxC23YwXY3/+th+o2C2Hngz34jy+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Specialization = "Dermatologist",
                            Surname = "Stupak",
                            TelNumber = "+48434343444",
                            TwoFactorEnabled = false,
                            UserName = "Julia"
                        });
                });

            modelBuilder.Entity("Scheduling.Models.ReservationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Specialist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Scheduling.Models.MyUsersIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Scheduling.Models.MyUsersIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scheduling.Models.MyUsersIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Scheduling.Models.MyUsersIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Scheduling.Models.ReservationModel", b =>
                {
                    b.HasOne("Scheduling.Models.MyUsersIdentity", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
